// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"] // 允许在数据库中进行全文搜索
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                    String         @id
  username              String         @unique
  displayName           String
  email                 String?        @unique
  passwordHash          String?
  googleId              String?        @unique
  avatarUrl             String?
  bio                   String?
  sessions              Session[]
  posts                 Post[]
  following             Follow[]       @relation("Following") // 关注的人
  followers             Follow[]       @relation("Followers") // 关注我的人
  likes                 Like[] // 用户的所有点赞
  bookmarks             Bookmark[] // 用户的书签
  comments              Comment[] // 用户评论
  receivedNotifications Notification[] @relation("Recipient") // 用户接收到的通知
  issuedNotifications   Notification[] @relation("Issuer") // 用户发出的通知

  createdAt DateTime @default(now())

  @@map("users") // 指定数据库表名a
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions") // 指定数据库表名
}

model Post {
  id                  String         @id @default(cuid()) // 使用 cuid 作为默认值
  content             String // 帖子内容
  userId              String // 发帖人id
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments         Media[] // 附件
  likes               Like[] // 帖子所有点赞
  bookmarks           Bookmark[] // 帖子书签
  comments            Comment[] // 帖子评论
  linkedNotifications Notification[] // 与该帖子相关的所有通知，一个帖子有多个Notification

  createdAt DateTime @default(now())

  @@map("posts")
}

model Follow {
  followerId  String // 关注者的用户id
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade) // 当前用户关注的其他人
  followingId String // 被关注者的用户id
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade) // 关注当前用户的其他人

  @@unique([followerId, followingId]) // 确保每对关注关系只能存在一次，防止重复关注
  @@map("follows")
}

model Media {
  id     String    @id @default(cuid())
  postId String?
  post   Post?     @relation(fields: [postId], references: [id], onDelete: SetNull) // 删除帖子时，不需要删除媒体，SetNull
  type   MediaType
  url    String

  createdAt DateTime @default(now())

  @@map("post_media")
}

// 媒体类型
// 图片
// 视频
enum MediaType {
  IMAGE
  VIDEO
}

// 定义用户对帖子的点赞关系
model Like {
  userId String // 点赞用户id
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String // 被点赞帖子id
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

// 用户书签
model Bookmark {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId]) // 确保每个用户对每个帖子只能有一个书签。防止了同一个用户对同一个帖子创建多个书签。
  @@map("bookmarks")
}

// 评论
model Comment {
  id      String @id @default(cuid())
  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId  String
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("comments")
}

// 通知
model Notification {
  id          String           @id @default(cuid()) // 唯一标识符，使用 cuid() 作为默认值
  recipientId String // 接收通知的用户ID
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade) // 与 User 模型的关系，表示通知的接收者
  issuerId    String // 发出通知的用户ID
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade) // 与 User 模型的关系，表示通知的发出者
  postId      String? // 可选的帖子ID，表示通知与特定帖子相关
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade) // 与 Post 模型的关系，表示通知关联的帖子
  type        NotificationType // 通知类型，使用枚举类型定义
  read        Boolean          @default(false) // 标记通知是否已读，默认值为 false

  createdAt DateTime @default(now()) // 创建时间，默认值为当前时间

  @@map("notifications") // 指定数据库表名为 "notifications"
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}
