// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"] // 允许在数据库中进行全文搜索
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id           String    @id
  username     String    @unique
  displayName  String
  email        String?   @unique
  passwordHash String?
  googleId     String?   @unique
  avatarUrl    String?
  bio          String?
  sessions     Session[]
  posts        Post[]
  following    Follow[]  @relation("Following") // 关注的人
  followers    Follow[]  @relation("Followers") // 关注我的人
  likes        Like[] // 用户的所有点赞

  createdAt DateTime @default(now())

  @@map("users") // 指定数据库表名a
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions") // 指定数据库表名
}

model Post {
  id          String  @id @default(cuid()) // 使用 cuid 作为默认值
  content     String // 帖子内容
  userId      String // 发帖人id
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments Media[] // 附件
  likes       Like[] // 帖子所有点赞

  createdAt DateTime @default(now())

  @@map("posts")
}

model Follow {
  followerId  String // 关注者的用户id
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade) // 当前用户关注的其他人
  followingId String // 被关注者的用户id
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade) // 关注当前用户的其他人

  @@unique([followerId, followingId]) // 确保每对关注关系只能存在一次，防止重复关注
  @@map("follows")
}

model Media {
  id     String    @id @default(cuid())
  postId String?
  post   Post?     @relation(fields: [postId], references: [id], onDelete: SetNull) // 删除帖子时，不需要删除媒体，SetNull
  type   MediaType
  url    String

  createdAt DateTime @default(now())

  @@map("post_media")
}

// 媒体类型
// 图片
// 视频
enum MediaType {
  IMAGE
  VIDEO
}

// 定义用户对帖子的点赞关系
model Like {
  userId String // 点赞用户id
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String // 被点赞帖子id
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}
